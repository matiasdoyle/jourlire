// Generated by CoffeeScript 1.5.0
(function() {
  var Reader;

  this.Reader = Reader = (function() {

    function Reader() {}

    Reader.prototype.url = 'http://localhost:3000';

    Reader.prototype.status = {
      article: 1,
      ignored: 2,
      homepage: 3,
      user_init: 4,
      saving: 5,
      saved: 6
    };

    Reader.prototype.articles = {};

    /*
    Get the human readable version of the statuses.
    
    Currently it is very simple and just returning the internal names
    for the statuses.
     
    @param {Number} n See this.status.
    @return {String} The status string.
    */


    Reader.prototype.status_string = function(n) {
      var s;
      for (s in this.status) {
        if (this.status[s] === n) {
          return s;
        }
      }
    };

    /*
    Login user.
    
    Sends a request to the server and saves the user's token if
    the user exists.
    
    @param {String} email    
    @param {String} password
    @param {Function} callback Given two params (err, data). err is the errors
                               returned by the server.
    */


    Reader.prototype.login = function(email, password, callback) {
      var _this = this;
      if (!email) {
        return callback(new TypeError('email is required'), null);
      }
      if (!password) {
        return callback(new TypeError('password is required'), null);
      }
      return $.ajax({
        url: "" + this.url + "/v1/auth/get-token?email=" + email + "&password=" + password,
        success: function(res) {
          if (!res.token) {
            return callback(res, null);
          }
          return _this.set_settings({
            token: res.token,
            email: email
          }, function(saved) {
            if (saved != null) {
              this._token = res.token;
            }
            return callback(null, res);
          });
        }
      });
    };

    /*
    Signup user.
     
    Sends a POST request to the server with the user data. If
    the user gets added the retrun from the server is the new
    user's token.
    
    @param {Object} user User object containing user and password.
    @param {Function} callback Given two params (err, data). data is the user object
                               returned from the server.
    */


    Reader.prototype.signup = function(user, callback) {
      var _this = this;
      if (!user) {
        return callback(new TypeError('user is required'), null);
      }
      if (!user.email || !user.password) {
        return callback(new TypeError('email and password is required'), null);
      }
      return $.ajax({
        url: "" + this.url + "/v1/user",
        type: 'POST',
        data: user,
        success: function(res) {
          if (!res.token) {
            return callback(res, null);
          }
          return _this.set_settings({
            token: res.token,
            email: email
          }, function(saved) {
            if (saved != null) {
              this._token = res.token;
            }
            return callback(null, res);
          });
        }
      });
    };

    /*
    Set settings to the settings object. The settings object is stored in
    localStorage.
    
    @param {Object} settings The settings to be added.
    @param {Function} callback Given one param (saved).
    */


    Reader.prototype.set_settings = function(settings, callback) {
      if (!settings || settings !== 'object') {
        return callback(false);
      }
      return this.get_settings(function(data) {
        $.extend(data, settings);
        return chrome.storage.local.set({
          settings: data
        }, function() {
          return callback(true);
        });
      });
    };

    /*
    Get setting from the settings object.
    
    @param {String|Function} key Key to search. Function to return
                                 the whole settings object.
    @param {Function} callback Given the setting string/object.
    */


    Reader.prototype.get_settings = function(key, callback) {
      if (typeof key === 'function') {
        callback = key;
        key = null;
      }
      return chrome.storage.local.get('settings', function(data) {
        data.settings = data.settings || {};
        if (key) {
          return callback(data.settings[key]);
        } else {
          return callback(data.settings);
        }
      });
    };

    /*
    Get the current token. If the token does not exist in
    `this._token` or in `localStorage` the user gets prompted to
    login again.
    
    @param {Function} callback Given `token` if token exists.
    */


    Reader.prototype.get_token = function(callback) {
      var _this = this;
      if (this._token) {
        return callback(this._token);
      }
      return this.get_settings('token', function(token) {
        if (token != null) {
          _this._token = token;
          return callback(token);
        } else {
          return callback(false);
        }
      });
    };

    /*
    Prompt the user to loging.
    
    Will open a new tab with the options page, if it is not already open.
    */


    Reader.prototype.prompt_login = function() {
      var url;
      url = chrome.extension.getURL('options.html');
      return chrome.tabs.query({
        url: url
      }, function(query) {
        if (query.length === 0) {
          return chrome.tabs.create({
            url: url
          });
        }
      });
    };

    /*
    Get current article's status.
    
    @param {Number} tab_id The tab group to find the article in.
    @return {Object} The article status object.
    */


    Reader.prototype.get_article_status = function(tab_id) {
      var article;
      article = this.articles[tab_id];
      return article[article.length - 1];
    };

    /*
    Checks if the URL matches the article format.
    
    Currently the function only checks if the URL contains a path. If
    it does it continues to check the URL does not exist in the 'ignore_list'.
    
    TODO: Update ignore_list with proper URLs.
    TODO: Move away from `indexOf` to regex instead.
    
    @param {String} url The URL to check.
    @param {Function} callback Given the status of the URL. See Reader#status for
                               more information.
    */


    Reader.prototype.ignore_list = function(url, callback) {
      var _this = this;
      if (!url.match(/\/.+\..+\/.+/)) {
        return callback(this.status.article);
      }
      return chrome.storage.local.get('ignore_list', function(data) {
        var i, _i, _len, _ref, _results;
        _ref = data.ignore_list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          url = url.replace(/http(|s):\/\/(www\.|)/, '');
          if (url.indexOf(data.ignore_list[i] !== -1)) {
            _results.push(callback(_this.status.ignored));
          } else {
            _results.push(callback(_this.status.article));
          }
        }
        return _results;
      });
    };

    /*
    Saves articles to server.
    
    @param {Array} articles Array of the potential articles to upload.
    @param {Function} callback Given two params (err, articles). Passes back the
                               modified articles object if no errors occure.
    */


    Reader.prototype.save_articles = function(articles, callback) {
      var _this = this;
      if (!articles) {
        return callback(new TypeError('No articles'), null);
      }
      return this.get_token(function(token) {
        if (!token) {
          _this.prompt_login();
          return callback(new Error('User not logged in'), null);
        }
        return articles.forEach(function(article) {
          var time_spent;
          if (article.status === this.status.article || article.status === this.status.user_init) {
            article.status = this.status.saving;
            article.token = token;
            if (!article.close_time) {
              article.close_time = Date.now();
            }
            time_spent = article.close_time - article.open_time;
            if (time_spent > this.min_time) {
              return $.ajax({
                url: "" + this.url + "/v1/article",
                type: 'POST',
                data: article,
                success: function(data) {
                  article.status = this.status.saved;
                  return callback(null, true);
                }
              });
            }
          }
        });
      });
    };

    /*
    Change status of the current article to that given
    in options.change_to.
    
    @param {String} tab_id The tab group to change the front most article/
    @param {Number} to The status to change to.
    @return {Boolean} returns false if changing status fails.
    */


    Reader.prototype.change_status = function(tab_id, to) {
      var article;
      if (!tab_id || !to) {
        return false;
      }
      article = this.articles[tab_id];
      return article[article.length - 1].status = to;
    };

    return Reader;

  })();

}).call(this);
